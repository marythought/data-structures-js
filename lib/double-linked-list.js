// Generated by CoffeeScript 1.10.0
var LinkedList, Node;

Node = (function() {
  function Node(value1, prev, next) {
    this.value = value1;
    this.prev = prev != null ? prev : null;
    this.next = next != null ? next : null;
  }

  return Node;

})();

LinkedList = (function() {
  function LinkedList(head, tail) {
    this.head = head != null ? head : null;
    this.tail = tail != null ? tail : null;
  }

  LinkedList.prototype.add = function(value) {
    var current;
    if (this.head === null) {
      this.head = new Node(value);
      return this.tail = this.head;
    } else {
      current = new Node(value, this.head);
      this.head = current;
      return current.prev.next = current;
    }
  };

  LinkedList.prototype.remove = function(value) {
    var current;
    current = this.head;
    while (current) {
      if (current.value === value) {
        if (current === this.head) {
          this.head = current.prev;
          current.prev.next = null;
        } else if (current === this.tail) {
          this.tail = current.next;
          current.next.prev = null;
        } else {
          current.prev.next = current.next;
          current.next.prev = current.prev;
        }
        return current;
      } else {
        current = current.prev;
      }
    }
    return "no match found";
  };

  LinkedList.prototype.search = function(value) {
    var current;
    current = this.head;
    while (current !== this.tail) {
      if (current.value === value) {
        return current;
      } else {
        current = current.prev;
      }
    }
    if (current.value === value) {
      return current;
    } else {
      return "no match found";
    }
  };

  LinkedList.prototype.toString = function() {
    var current, string;
    current = this.tail;
    string = "";
    while (current.next) {
      string += current.value + ", ";
      current = current.next;
    }
    string += current.value;
    return string;
  };

  return LinkedList;

})();

module.exports = {
  LinkedList: LinkedList,
  Node: Node
};
