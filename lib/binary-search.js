// Generated by CoffeeScript 1.10.0
var BinarySearchTree, NullBinaryTree;

NullBinaryTree = (function() {
  function NullBinaryTree(value1) {
    this.value = value1 != null ? value1 : null;
  }

  NullBinaryTree.prototype.size = function() {
    return 0;
  };

  NullBinaryTree.prototype.contains = function() {
    return false;
  };

  NullBinaryTree.prototype.depth = function() {
    return 0;
  };

  return NullBinaryTree;

})();

BinarySearchTree = (function() {
  function BinarySearchTree(value1, left, right) {
    this.value = value1;
    this.left = left != null ? left : new NullBinaryTree;
    this.right = right != null ? right : new NullBinaryTree;
  }

  BinarySearchTree.prototype.insert = function(value) {
    if (value === this.value) {
      return "duplicate entry";
    } else if (this.left instanceof NullBinaryTree && value < this.value) {
      return this.left = new BinarySearchTree(value);
    } else if (this.right instanceof NullBinaryTree && value > this.value) {
      return this.right = new BinarySearchTree(value);
    } else {
      if (value < this.value) {
        return this.left.insert(value);
      } else {
        return this.right.insert(value);
      }
    }
  };

  BinarySearchTree.prototype.contains = function(value) {
    if (value === this.value) {
      return true;
    }
    if (value < this.value) {
      return this.left.contains(value);
    } else if (value > this.value) {
      return this.right.contains(value);
    } else {
      return false;
    }
  };

  BinarySearchTree.prototype.size = function() {
    return this.left.size() + this.right.size() + 1;
  };

  BinarySearchTree.prototype.depth = function() {
    var left_height, right_height;
    left_height = this.left.depth();
    right_height = this.right.depth();
    if (left_height > right_height) {
      return left_height + 1;
    } else {
      return right_height + 1;
    }
  };

  BinarySearchTree.prototype.balance = function() {
    var left_height, right_height;
    left_height = this.left.depth() + 1;
    right_height = this.right.depth() + 1;
    return left_height - right_height;
  };

  return BinarySearchTree;

})();

module.exports = {
  BinarySearchTree: BinarySearchTree,
  NullBinaryTree: NullBinaryTree
};
